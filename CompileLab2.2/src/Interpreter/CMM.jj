/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CMM.jj */
/*@egen*//**
* This is a JJTree file for the CMM grammer.
*
* Author: AlexRui
* Date: 2018.10.30
*/
options{
  JDK_VERSION = "1.8";
}
PARSER_BEGIN(compiler)
package Interpreter;
public class compiler/*@bgen(jjtree)*/implements compilerTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTcompilerState jjtree = new JJTcompilerState();

/*@egen*/
  public static void main(String args[]){
    System.out.println("Please type the valid statement...");
    System.out.println(" Using a ! to terminate your input>>");
    new compiler(System.in);
    try {
      SimpleNode n = compiler.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e){
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(compiler)

SKIP:{ /*lank character*/
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//"(~["\n", "\r"])*("\n"
  | "\r"
  | "\r\n")>
  | <"/*"(~["*"])*"*"(~["/"](~["*"])*"*")*"/">
}

TOKEN:/*key words*/
{
  <IF:"if">
  | <ELSE:"else">
  | <READ:"read">
  | <WRITE:"write">
  | <WHILE:"while">
  | <INT:"int">
  | <REAL:"real">
  | <BOOL:"bool">
}
TOKEN:/* int */
{
  <INTEGER_LITERAL:["1"-"9"](<DIGIT>)*>
}
TOKEN:/* real */
{
  <REAL_LITERAL:(<DIGIT>)+
  | (<DIGIT>)+"."
  | (<DIGIT>)+"."(<DIGIT>)+
  | "."(<DIGIT>)+>
}
TOKEN:/* digit */
{
  <#DIGIT:["0"-"9"]>
}
TOKEN:/* bool */
{
    <BOOL_LITERAL:"true"|"false">
}
TOKEN:
{
  <UNDERSCORE:"_">
  | <COMMA:",">
  | <SEMI:";">
  | <COLON:":">
  | <LEFT_PAR:"(">
  | <RIGHT_PAR:")">
  | <LEFT_BRA: "[">
  | <RIGHT_BRA: "]">
  | <LEFT_CUR: "{">
  | <RIGHT_CUR: "}">
  | <ASSIGN:"=">
  | <PLUS:"+">
  | <MINUS:"-">
  | <TIMES:"*">
  | <DIVIDE:"/">
  | <MOD: "%">
  | <LESS: "<">
  | <GREATER: ">">
  | <EQUAL: "==">
  | <NOTEQUAL: "<>">
  | <LESS_EQUAL: "<=">
  | <GREATER_EQUAL: ">=">

}
TOKEN:/* \u7039\u6c2b\u7b9f\u93cd\u56ea\u7611\u7ed7\ufffd */
{
  <IDENTIFIER:<LETTER>
  | <LETTER>(<LETTER>
  | <DIGIT>
  | <UNDERSCORE>)*(<LETTER>
  | <DIGIT>)+>
  | <#LETTER:["a"-"z", "A"-"Z"]>
}
SimpleNode Start():{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Procedure()"!"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u6d93\u8364\u25bc\u6434\ufffd*/
void Procedure():{/*@bgen(jjtree) Procedure */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Procedure */
  try {
/*@egen*/
  (Statement()
  | Block())+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u7487\ue15e\u5f5e*/
void Statement():{/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  VarialbeDeclaration()
  | Identifier()<ASSIGN>Expression()<SEMI>
  |LOOKAHEAD(3)(<IF><LEFT_PAR>Condition()<RIGHT_PAR>Statement()[<ELSE>Statement()])+
  | <READ><LEFT_PAR>Identifier()(<COMMA>Identifier())*<RIGHT_PAR><SEMI>
  | <WRITE><LEFT_PAR>Expression()(<COMMA>Identifier())*<RIGHT_PAR><SEMI>
  | <WHILE><LEFT_PAR>Condition()<RIGHT_PAR>Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u9359\u6a40\u567a\u6fb9\u7248\u69d1*/
void VarialbeDeclaration():{/*@bgen(jjtree) VarialbeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIALBEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VarialbeDeclaration */
  try {
/*@egen*/
  ((<INT>
  | <REAL>
  | <BOOL>)[<LEFT_BRA>Expression()<RIGHT_BRA>])Identifier()(<COMMA>Identifier())*<SEMI>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Block():{/*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Block */
    try {
/*@egen*/
    <LEFT_CUR>(Statement()
                | Block())<RIGHT_CUR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u741b\u3128\u63ea\u5bee\ufffd*/
void Expression():{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  Term()((<PLUS>
  | <MINUS>)Term())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u6924\ufffd*/
void Term():{/*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  Factor()((<TIMES>
  | <DIVIDE>)Factor())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u9365\u72b2\u74d9*/
void Factor():{/*@bgen(jjtree) Factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Factor */
  try {
/*@egen*/
  Identifier()
  | <LEFT_PAR>Expression()<RIGHT_PAR>
  | Integer()
  | Real()
  | Bool()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u93c9\u2032\u6b22*/
void Condition():{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    Expression()(<EQUAL>
    | <NOTEQUAL>
    | <LESS>
    | <GREATER>
    | <LESS_EQUAL>
    | <GREATER_EQUAL>)Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u93cd\u56ea\u7611\u7ed7\ufffd*/
void Identifier():{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  <IDENTIFIER>[<LEFT_BRA>Expression()<RIGHT_BRA>]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u93c1\u5b58\u669f*/
void Integer():{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  <INTEGER_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*\u6fb6\u52ed\u608a\u7039\u70b4\u669f*/
void Real():{/*@bgen(jjtree) Real */
  SimpleNode jjtn000 = new SimpleNode(JJTREAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Real */
   try {
/*@egen*/
   <REAL_LITERAL>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 }
 void Bool():{/*@bgen(jjtree) Bool */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Bool */
     try {
/*@egen*/
     <BOOL_LITERAL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
 }

